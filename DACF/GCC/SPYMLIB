#include "spymlib.h"
#include "stdio.h"
extern routine ldSVC(char* name,long int fn,
                     long int* m,long int sar);
extern routine ldMDL(char* name,long int* m,long int sar);

extern int instSVC(routine ptr,long int* m,long int sar);
extern int stAlien(char* name,char* lib,
                   t_ecb* ecb,long int* m,long int sar);
extern int wtAlien(t_ecb* ecb,long int* m,long int sar);

char* healDD(char* orig){
  long int i=0;
  long int j=0;
  long int flag = 1;
  char* s = malloc(64);
  while(orig[i]!=0){
    if (orig[i]>='a' && orig[i] <= 'i' ||
        orig[i]>='j' && orig[i] <= 'r' ||
        orig[i]>='s' && orig[i] <= 'z'){
      s[j] = toupper(orig[i]);
      j++;i++;
    }
    else{
      if (orig[i]>='A' && orig[i] <= 'I' ||
          orig[i]>='J' && orig[i] <= 'R' ||
          orig[i]>='S' && orig[i] <= 'Z' || orig[i] == '$'){
        s[j] = orig[i];
        j++;i++;
      }
      else{
        if (orig[i]==':' && flag){
          flag = 0;
          s[j] = orig[i];j++;
        };
        i++;
      };
    };
  };

  for(i=j;i<11;i++){
    s[i] = 0x40;        /*name for load should be padded*/
  };
  s[11] = 0;
  return s;             /*add check*/
}

char* healEP(char* name){
  char* s = malloc(9);
  int n = strlen(name);
  memcpy(s,name,n);
  int i;
  for(i=n;i<8;i++){
    s[i] = 0x40;        /*name for load should be padded*/
  };
  s[8] = 0;
  return s;             /*add check*/
}

routine loadSVC(char* name,long int fn){
  char* temp;
  char m[128];
  if (temp = healEP(name)){
/*  fwrite(temp,1,9,stdout);*/
    return ldSVC(temp,fn,&m,0);
  }
}

int installSVC(routine ptr){
  char m[128];
  if (ptr){
    return instSVC(ptr,&m,0);
  }
  else{
    return 15;
  }
}

int startAlien(char* name,char* lib,t_ecb* ecb){
  char* temp1;
  char* temp2;
  char m[128];
  if ((temp1 = healEP(name)) && (temp2= healDD(lib))){
/*  fwrite(temp2,1,14,stdout);  */
    return stAlien(temp1,temp2+3,ecb,&m,0);
  };
  free(temp1);
  free(temp2);
}

int waitAlien(t_ecb* ecb){
  char m[128];
  if (ecb){
    return wtAlien(ecb,&m,0);
  }
  else{
    return 15;
  }
}

routine loadModule(char* name){
  char* temp;
  char m[128];
  if (temp = healEP(name)){
/*  fwrite(temp,1,9,stdout);*/
    return ldMDL(temp,&m,0);
  }
}
